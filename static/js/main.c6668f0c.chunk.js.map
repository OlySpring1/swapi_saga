{"version":3,"sources":["styles/colors.ts","components/Global.styles.tsx","store/modulSearch.ts","components/Search/Search.styled.ts","store/selectors.ts","components/Search/Search.tsx","components/Spinner/Spinner.styled.ts","components/Spinner/Spinner.tsx","components/PersonList/PersonList.styled.ts","store/modulPerson.ts","components/ItemList/ItemList.styled.tsx","components/ItemList/ItemList.tsx","components/PersonList/PersonList.tsx","App.tsx","store/moduleLoader.ts","store/modulErrorMessage.ts","store/reducers.ts","utils/API.ts","store/sagas.ts","store/index.ts","index.tsx"],"names":["colors","GlobalStyles","styles","css","initialState","reducer","resultQuery","action","type","TitleStyled","styled","InputStyled","getIsLoading","state","loading","getErrorMessage","error","getVisiblePersons","length","persons","Search","dispatch","useDispatch","errorMessage","useSelector","className","placeholder","onKeyUp","e","value","target","query","handleOnKeyUp","OverlayStyled","Bounce1","Bounce2","SpinnerStyled","Spinner","PersonListStyled","Item","ItemStyled","ItemList","person","PersonList","visiblePersons","useEffect","map","key","App","rootReducer","combineReducers","axios","create","baseURL","handleLoadPerson","watchFetchPersons","setQueryAsync","watchSearchInput","rootSaga","fetchPersons","a","API","get","response","data","results","name","put","call","takeEvery","delay","takeLatest","all","sagaMiddleware","createSagaMiddleware","store","createStore","compose","applyMiddleware","composeWithDevTools","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6668f0c.chunk.js","sourcesContent":["export const colors = {\r\n  GRAY: \"rgba(0, 0, 0, 0.1)\",\r\n  GRAY_HOVER: \"#c5c4c4\",\r\n  TITLE_COLOR: \"rgba(175, 47, 47, 0.15)\",\r\n  TEXT_COLOR: \"#4d4d4d\",\r\n}","import React from 'react';\r\nimport { Global, css } from '@emotion/core'\r\nimport {colors} from '../styles/colors'\r\n\r\nexport const GlobalStyles = () => (\r\n  <Global\r\n    styles={css`\r\n  * {\r\n    box-sizing: border-box;\r\n  }\r\n  html,\r\n  body,\r\n  button,\r\n  li,\r\n  ul,\r\n  h1,\r\n  p,\r\n  input{\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  body {\r\n    max-width: 550px;\r\n    margin: 0 auto;\r\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\r\n    font-size: 20px;\r\n    font-weight: 300;\r\n    line-height: 1.4em;\r\n    color: ${colors.TEXT_COLOR};\r\n    \r\n    @media screen and (max-width: 570px){\r\n      max-width: 97%;\r\n  }\r\n  li {\r\n    list-style: none;\r\n  }\r\n  button {\r\n    border: none;\r\n    background: none;\r\n    text-transform: capitalize;\r\n    vertical-align: baseline;\r\n    font: inherit;\r\n    cursor: pointer;\r\n  }\r\n  button: focus{\r\n    outline: none;\r\n  }\r\n  input {\r\n    font: inherit;\r\n    outline: none;\r\n  }\r\n  `}\r\n  />\r\n)\r\n","import { Action } from 'redux';\n\nexport const RESULT_QUERY = 'RESULT_QUERY';\nexport const INPUT_CHANGED = 'INPUT_CHANGED';\n\nexport const setChangedSearchInput = (query: string) => (\n  {\n    type: INPUT_CHANGED,\n    query,\n  }\n);\nexport type setChangedSearchInput = Action<typeof INPUT_CHANGED> & {\n      query: string;\n}\n\n\nexport type setResultQuery = Action<typeof RESULT_QUERY> & {\n  resultQuery: string[];\n}\n\ntype AllowedActions = setResultQuery;\nlet initialState: string[] = [];\nconst reducer = (resultQuery = initialState, action: AllowedActions) => {\n  switch (action.type) {\n    case RESULT_QUERY:\n      return action.resultQuery;\n    default:\n      return resultQuery;\n  }\n};\n\nexport default reducer;\n","import styled from '@emotion/styled';\r\nimport {colors} from '../../styles/colors'\r\n\r\ntype ErrorMessageProps = {\r\n  top: string\r\n}\r\n\r\nexport const TitleStyled = styled('h1')`\r\n  position: absolute;\r\n  top: 40px;\r\n  left: 0;\r\n  width: 100%;\r\n  font-size: 100px;\r\n  font-weight: 100;\r\n  text-align: center;\r\n  color: ${colors.TITLE_COLOR};\r\n  text-rendering: optimizeLegibility;\r\n`\r\nexport const InputStyled = styled('input') `\r\n  width: 100%;\r\n  border: 1px solid #c3c0c0;\r\n  border-radius: 16px;\r\n  outline: none;\r\n  padding: 16px 16px 16px 40px;\r\n  margin-top: 110px;\r\n  font-style: italic;\r\n`\r\n// export const ErrorMessage = styled('p')`\r\n//   top: ${(props: ErrorMessageProps) => props.top };  \r\n//   position: relative;\r\n//   text-align: center;\r\n//   font-size: 14px;\r\n//   color: rgba(175, 47, 47, 1);\r\n// `","import {rootReducer} from './reducers'\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n\r\nexport const getPersons = (state: RootState) => state.persons;\r\nexport const getQuery = (state: RootState) => state.resultQuery;\r\nexport const getIsLoading = (state: RootState) => state.loading\r\nexport const getErrorMessage = (state: RootState) => state.error\r\n\r\nexport const getVisiblePersons = (state: RootState) => {\r\n\r\n  return state.resultQuery.length > 0 ? state.resultQuery \r\n    : state.persons\r\n};\r\n","import React, { KeyboardEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setChangedSearchInput } from '../../store/modulSearch';\r\nimport { InputStyled, TitleStyled} from './Search.styled';\r\nimport { getErrorMessage } from '../../store/selectors';\r\n\r\nconst Search = () => {\r\n  const dispatch = useDispatch();\r\n  const errorMessage = useSelector(getErrorMessage)\r\n  \r\n  const handleOnKeyUp = (e: KeyboardEvent) => {\r\n    const { value } = e.target as HTMLInputElement;\r\n    dispatch(setChangedSearchInput(value));\r\n  };\r\n\r\n  return (\r\n    <header >\r\n      <TitleStyled>SWAPI</TitleStyled>\r\n      {errorMessage && <div>{errorMessage}</div>}\r\n\r\n      <InputStyled\r\n        type=\"text\"\r\n        className=\"search\"\r\n        placeholder=\"Enter person name for search...\"\r\n        onKeyUp={(e) => handleOnKeyUp(e)}\r\n      />\r\n    </header>\r\n  )\r\n}\r\nexport default Search;","import styled from '@emotion/styled/macro'\nexport const OverlayStyled = styled.div`\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 2;\n`\nexport const Bounce1 = styled.div`\n  animation-delay: -0.32s;\n`\n\nexport const Bounce2 = styled.div`\n  animation-delay: -0.16s;\n`\n\nexport const SpinnerStyled = styled('div')`\n  margin: 100px auto 0;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n\n  & > div {\n    width: 18px;\n    height: 18px;\n    background-color: #333;\n\n    border-radius: 100%;\n    display: inline-block;\n    animation: sk-bouncedelay 1.4s infinite ease-in-out both;\n  }\n\n  ${Bounce1} {\n    animation-delay: -0.32s;\n  }\n\n  ${Bounce2} {\n    animation-delay: -0.16s;\n  }\n\n  @keyframes sk-bouncedelay {\n    0%,\n    80%,\n    100% {\n      transform: scale(0);\n    }\n    40% {\n      transform: scale(1);\n    }\n  }\n`\n","import React from 'react'\nimport {\n  OverlayStyled,\n  SpinnerStyled,\n  Bounce1,\n  Bounce2,\n} from './Spinner.styled'\nexport const Spinner = () => (\n  <OverlayStyled>\n    <SpinnerStyled>\n      <Bounce1 />\n      <Bounce2 />\n      <div></div>\n    </SpinnerStyled>\n  </OverlayStyled>\n)\n","import styled from '@emotion/styled'\r\nexport const PersonListStyled = styled('ul')`\r\n  width: 100%;\r\n  height: 340px;\r\n  overflow-y: auto;\r\n  background: #fff;\r\n  margin: 20px 0;\r\n  padding: 16px 0;\r\n  position: relative;\r\n  border: 1px solid #c3c0c0;\r\n  box-shadow: 0 2px 4px 0 rgba(0, 0, 0, 0.2), 0 25px 50px 0 rgba(0, 0, 0, 0.1);\r\n`","import { Action } from 'redux';\r\nexport const REQUESTED_PERSON = 'REQUESTED_PERSON';\r\nexport const REQUESTED_PERSON_SUCCEEDED = 'REQUESTED_PERSON_SUCCEEDED'\r\n\r\nexport const loadPerson = () => ({\r\n  type: REQUESTED_PERSON,\r\n})\r\n\r\nexport const requestedPersonSucceeded = (persons: string[]) => ({\r\n  type: REQUESTED_PERSON_SUCCEEDED,\r\n})\r\n\r\ntype requestedPerson = Action<typeof REQUESTED_PERSON> \r\n\r\ntype requestedPersonSucceeded = Action<typeof REQUESTED_PERSON_SUCCEEDED> & {\r\n  persons: string[]\r\n}\r\n\r\ntype AllowedActions = requestedPersonSucceeded;\r\n\r\nlet initialState: string[] = [];\r\n\r\nconst persons = (persons = initialState, action: AllowedActions) => {\r\n  switch (action.type) {\r\n    case REQUESTED_PERSON_SUCCEEDED:\r\n      return [...persons, ...action.persons]\r\n      default:\r\n      return persons\r\n  }\r\n}\r\n\r\nexport default persons;","import styled from '@emotion/styled/macro';\r\nimport {colors} from '../../styles/colors'\r\n\r\nexport const Item = styled('li')`\r\n  width: 75%;\r\n  background-color: #fff;\r\n  text-align: start;\r\n  word-break: break-all;\r\n  color: ${colors.TEXT_COLOR};\r\n}\r\n`\r\nexport const ItemStyled = styled('div')`\r\n  width: 100%;\r\n  min-height: 58px;\r\n  padding: 6px 10px 6px 40px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  border-bottom: 1px solid #c3c0c0;\r\n  background-color: #fff;\r\n`\r\n","import React from 'react';\r\nimport './ItemList.styled.tsx';\r\nimport { Item, ItemStyled } from './ItemList.styled';\r\n\r\ntype PropsPerson = {\r\n  person: string\r\n}\r\n\r\nconst ItemList: React.FC<PropsPerson> = ({ person }) => {\r\n\r\n  return (\r\n    <ItemStyled >\r\n      <Item>\r\n        {person}\r\n      </Item>\r\n    </ItemStyled>\r\n  )\r\n}\r\n\r\nexport default ItemList;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getVisiblePersons } from '../../store/selectors';\r\nimport { PersonListStyled } from './PersonList.styled';\r\nimport { loadPerson } from '../../store/modulPerson';\r\nimport ItemList from '../ItemList/ItemList';\r\n\r\nconst PersonList = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const visiblePersons = useSelector(getVisiblePersons);\r\n  useEffect(() => {\r\n    dispatch(loadPerson())\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <PersonListStyled>\r\n      {visiblePersons.map((person: string) => (\r\n        <ItemList key={person} person={person}>\r\n        </ItemList>\r\n      ))}\r\n    </PersonListStyled>\r\n  )\r\n}\r\n\r\nexport default PersonList;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './App.css';\nimport { GlobalStyles } from './components/Global.styles';\nimport Search from './components/Search/Search';\nimport { Spinner } from './components/Spinner/Spinner';\nimport PersonList from './components/PersonList/PersonList';\nimport { getIsLoading } from './store/selectors';\n\nconst App = () => {\n  const loading = useSelector(getIsLoading)\n  return (\n    <div >\n      <GlobalStyles />\n      {loading && <Spinner />}\n      <Search />\n      <PersonList />\n    </div>\n  );\n}\nexport default App;\n","import { Action } from 'redux';\n\nexport const LOADER_START = 'LOADER_START'\nexport const LOADER_FINISH = 'LOADER_FINISH'\n\nexport const startLoading = () => ({ type: 'LOADING_START' })\nexport const finishLoading = () => ({ type: 'LOADING_FINISH' })\ntype startLoading = Action<typeof LOADER_START> \ntype finishLoading = Action<typeof LOADER_FINISH> \n\ntype AllowedActions = startLoading |finishLoading;\n\n\nconst reducer = (loading = false, action: AllowedActions) => {\n  switch (action.type) {\n    case LOADER_START:\n      return true\n\n    case LOADER_FINISH:\n      return false\n\n    default:\n      return loading\n  }\n}\nexport default reducer\n","import { Action } from 'redux';\n\nexport const SET_MESSAGE = 'SET_MESSAGE';\n\nexport const setMessage = (error: string) => ({ type: SET_MESSAGE, error });\ntype setMessage = Action<typeof SET_MESSAGE> & {\n  error: string\n}\n\ntype AllowedActions = setMessage\nconst reducer = (error = '', action: AllowedActions) => {\n  switch (action.type) {\n    case SET_MESSAGE:\n      return action.error;\n    default:\n      return error;\n  }\n};\n\nexport default reducer;\n","import { combineReducers } from 'redux';\r\nimport persons from './modulPerson';\r\nimport resultQuery from './modulSearch';\r\nimport loading from './moduleLoader';\r\nimport error from './modulErrorMessage';\r\nexport const rootReducer = combineReducers({\r\n  persons,\r\n  resultQuery,\r\n  loading,\r\n  error\r\n});\r\n","import axios from 'axios';\r\nconst API = 'https://swapi.dev/api/people/';\r\n\r\nexport default axios.create({\r\n  baseURL: API\r\n});","import { put, takeEvery, all, delay, takeLatest, call } from 'redux-saga/effects'\r\nimport { LOADER_FINISH, LOADER_START } from './moduleLoader';\r\nimport { SET_MESSAGE } from './modulErrorMessage';\r\nimport { REQUESTED_PERSON, REQUESTED_PERSON_SUCCEEDED } from './modulPerson';\r\nimport { INPUT_CHANGED, RESULT_QUERY, setChangedSearchInput } from './modulSearch';\r\nimport API from '../utils/API'\r\n\r\nconst fetchPersons = async () => {\r\n  try {\r\n    let response = await API.get('/');\r\n    const persons = response.data.results\r\n      .map((person: IPerson) => person.name)\r\n\r\n    return persons;\r\n  } catch (error) {\r\n    return error\r\n  }\r\n}\r\n\r\nexport function* handleLoadPerson() {\r\n  yield put({ type: LOADER_START })\r\n  try {\r\n    const persons = yield call(fetchPersons);\r\n\r\n    yield put({ type: REQUESTED_PERSON_SUCCEEDED, persons })\r\n\r\n  } catch (error) {\r\n\r\n    yield put({ type: SET_MESSAGE, error: 'Oops! Something went wrong... :(' })\r\n  }\r\n  finally {\r\n    yield put({ type: LOADER_FINISH })\r\n  }\r\n}\r\n\r\nfunction* watchFetchPersons() {\r\n  yield takeEvery(REQUESTED_PERSON, handleLoadPerson)\r\n}\r\nfunction* setQueryAsync({ query }: setChangedSearchInput ) {\r\n  \r\n  yield delay(300)\r\n  try {\r\n    if (query.length === 0) {\r\n\r\n      yield put({ type: RESULT_QUERY, resultQuery: [] })\r\n      return\r\n    }\r\n    let response = yield API.get(`/?search=${query}`);\r\n\r\n    const resultQuery = response.data.results\r\n      .map((person: IPerson) => person.name)\r\n    yield put({ type: RESULT_QUERY, resultQuery })\r\n  } catch (error) {\r\n    yield put({ type: SET_MESSAGE, error: 'Oops! Something went wrong... :(' })\r\n  }\r\n}\r\n\r\nfunction* watchSearchInput() {\r\n  // will cancel current running handleInput task\r\n  yield takeLatest(INPUT_CHANGED, setQueryAsync);\r\n}\r\n\r\nexport default function* rootSaga() {\r\n  yield all([\r\n    watchFetchPersons(),\r\n    watchSearchInput(),\r\n  ])\r\n}","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport { rootReducer } from './reducers'\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootSaga from './sagas';\r\n// create sagaMiddleware\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// mount it in the Store\r\nconst store = createStore(\r\n  rootReducer,\r\n  compose(\r\n    applyMiddleware(sagaMiddleware),\r\n    composeWithDevTools()\r\n  ),\r\n);\r\n// then run saga\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}